#!/bin/sh -e
#
# $Id$
# Copyright (C) 2003  Dmitry V. Levin <ldv@altlinux.org>
# 
# The initroot utility for the hasher project
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

. /usr/share/hasher/functions

Usage()
{
	cat >&2 <<EOF
initroot - fills chroot with initial set of packages.

This program is free software, covered by the GNU General Public License.
initroot comes with ABSOLUTELY NO WARRANTY, see license for details.

Usage: $PROG [options] <path-to-workdir>

<path-to-workdir> must be valid writable directory.

Valid options are:
--no-cache                      do not use cache;
--number=NUMBER                 subconfig identifier;
--hasher-priv-dir=DIR           hasher-priv directory;
--nprocs=NUMBER                 number of CPUs to use;
--install-langs=LANGLIST        list of languages to install;
--contents-index-bin=INDEX      pkg contents binary index;
--contents-index-all=INDEX      pkg contents complete index;
-v, --verbose                   print a message for each action;
-h, --help                      show this text.
EOF
	[ -n "$1" ] && exit "$1" || exit
}

TEMP=`getopt -n $PROG -o v,h -l no-cache,number:,hasher-priv-dir:,nprocs:,install-langs:,contents-index-all:,contents-index-bin:,verbose,help -- "$@"` || Usage
eval set -- "$TEMP"

no_cache=
nprocs=
install_langs=dummy
contents_index_all=
contents_index_bin=
while :; do
	case "$1" in
		--no-cache) no_cache=1; shift
			;;
		--number)
			shift
			number="${1##-}"
			[ -z "$(echo -E "$number" |tr -d [0-9])" ] ||
				Fatal "--number: $number: invalid number."
			number="-$number"
			shift
			;;
		--nprocs)
			shift
			nprocs="$1"
			[ -z "$(echo -E "$nprocs" |tr -d [0-9])" ] ||
				Fatal "--nprocs: $nprocs: invalid number."
			shift
			;;
		--install-langs) shift; install_langs="$1"; shift
			;;
		--hasher-priv-dir) shift; hasher_priv_dir="$1"; shift
			;;
		--contents-index-all) shift; contents_index_all="$1"; shift
			;;
		--contents-index-bin) shift; contents_index_bin="$1"; shift
			;;
		-v|--verbose) verbose=-v; shift
			;;
		-h|--help) Usage 0
			;;
		--) shift; break
			;;
		*) Fatal "unrecognized option: $1"
			;;
	esac
done

# exactly one argument, please.
[ "$#" -eq 1 ] || Usage

set_workdir "$1"
shift

[ -d "$chroot" ] || Fatal "$chroot: cannot access chroot."
[ -d "$aptbox" ] || Fatal "$aptbox: cannot access aptbox."
[ -r "$APT_CONFIG" ] || Fatal "$APT_CONFIG: cannot access APT configuration."

if [ -z "$no_cache" ]; then
	mkdir -p -m700 $verbose cache
	mkdir -p -m700 $verbose cache/"$PROG"/{list,package}{,.new}
fi

check_helpers

ugid2="$("$getugid2" $number)" ||
	Fatal "getugid2 failed."
uid2="$(echo "$ugid2" |cut -d: -f1)"
gid2="$(echo "$ugid2" |cut -d: -f2)"

[ -n "$nprocs" ] ||
	nprocs="$(N=`egrep -cs ^cpu[0-9]+ /proc/stat ||:`; [ "$N" -gt 0 ] 2>/dev/null && echo -n "$N" || echo 1)"

check_tty

initlist="$(print_uris setup filesystem rpm 'fakeroot>=0:0.7.3')" ||
	Fatal "failed to generate initial package file list."
[ -n "$initlist" ] &&
	Verbose "generated initial package file list." ||
	Fatal "failed to generate initial package file list."

# reorder to get setup and filesystem first.
initlist="$(echo "$initlist" |fgrep /setup-)
$(echo "$initlist" |fgrep /filesystem-)
$(echo "$initlist" |egrep -v '/(setup|filesystem)-')"

[ -n "$no_cache" ] || echo "$initlist" >"cache/$PROG/list.new/init"

buildlist="$(print_uris basesystem 'rpm-build>=0:4.0.4-alt21' 'kernel-headers-common>=1.1.4-alt1' time)" ||
	Fatal "failed to generate build package file list."
buildlist="$(
	echo "$buildlist" |while read bp; do
		echo "$initlist" |grep -qs "^$bp\$" || echo "$bp"
	done
)"
[ -n "$buildlist" ] &&
	Verbose "generated build package file list." ||
	Fatal "failed to generate build package file list."

[ -n "$no_cache" ] || echo "$buildlist" >"cache/$PROG/list.new/build"

rebuild_cache=
if [ -z "$no_cache" ]; then

cat cache/"$PROG"/list.new/{init,build} |
	while read f; do
		touch -r "$f" "cache/$PROG/package.new/${f##*/}"
	done

while :; do
	for f in cache/"$PROG"/{rpmdb.tar,chroot.cpio}; do
		if [ ! -s "$f" ]; then
			Verbose "missing $f archive, invalidating cache"
			rebuild_cache=1
			break 2
		fi
	done
	if ! cmp -s cache/"$PROG"/list{.new,}/init; then
		Verbose "init list mismatch, invalidating cache"
		rebuild_cache=1
		break
	fi
	if ! cmp -s cache/"$PROG"/list{.new,}/build; then
		Verbose "build list mismatch, invalidating cache"
		rebuild_cache=1
		break
	fi
	bad="cache/$PROG/list.new/bad"
	rm -f "$bad"
	cat cache/"$PROG"/list.new/{init,build} |
		while read f; do
			n="${f##*/}"
			if [ "cache/$PROG/package.new/$n" -nt "cache/$PROG/package/$n" -o \
			     "cache/$PROG/package.new/$n" -ot "cache/$PROG/package/$n" ]; then
				Verbose "package $n mismatch, invalidating cache"
				echo "$n" >"$bad"
				break
			fi
		done
	if [ -f "$bad" ]; then
		rebuild_cache=1
		break
	fi
	break
done

# Regenerate data for later cache validation.
mv -f $verbose cache/"$PROG"/list{.new,}/init
mv -f $verbose cache/"$PROG"/list{.new,}/build
rm -f cache/"$PROG"/package/*
mv -f cache/"$PROG"/package.new/* cache/"$PROG"/package/

fi # !no_cache

if [ -n "$no_cache" -o -n "$rebuild_cache" ]; then

purge_chroot_in
purge_chroot_out
for f in $initlist; do
	copy_chroot_incoming "$f"
	rpm2cpio "$f" |"$chrootuid1" $number "$chroot" /.host/cpio --extract --make-directories --sparse --quiet &&
		Verbose "unpacked ${f##*/}" ||
		Fatal "unpack of ${f##*/} failed."
done
Verbose "unpacked initial package list."

cat >"$entry" <<__EOF__
$entry_header

export DURING_INSTALL=1
# FIXME: mtab is missing in setup-2.2.2-alt1
touch /etc/mtab
# /FIXME
rm -f /etc/rpm/macros.db1
# FIXME: glibc-locales is too large
echo '%_install_langs $install_langs' >>/etc/rpm/macros
# /FIXME
rpmdb --initdb
__EOF__
chmod 755 "$entry"
Verbose "created entry point: $entry"

"$chrootuid1" $number "$chroot" /.host/entry &&
	Verbose "created RPM database." ||
	Fatal "failed to create RPM database."

cat >"$entry" <<__EOF__
$entry_fakeroot_header

export DURING_INSTALL=1
rpmi -i $verbose --justdb --nodeps $(for f in $initlist; do echo -n "\"$(quote_arg "${f##*/}")\" "; done)
__EOF__

"$chrootuid1" $number "$chroot" /.host/entry &&
	Verbose "installed initial package list." ||
	Fatal "failed to install initial package list."

purge_chroot_in
update_RPM_database --nodeps $initlist

for f in /etc/host.conf /etc/hosts /etc/resolv.conf; do
	if [ -r "$f" -a -s "$f" ]; then
	cat >"$entry" <<__EOF__
$entry_header

# Too simple to call fakeroot here.
cat >$f
__EOF__

		cat $f |"$chrootuid1" $number "$chroot" /.host/entry &&
			Verbose "installed $f file." ||
			Fatal "failed to install $f file."
	fi
done

# At this stage, RPM inside chroot is fully functional.

purge_chroot_in
purge_chroot_out
copy_chroot_incoming $buildlist

cat >"$entry" <<__EOF__
$entry_fakeroot_header

export DURING_INSTALL=1
# FIXME: dev shouldn't be installed
rpmi -i $verbose --nodeps $hash $(for f in $buildlist; do f="${f##*/}"; [ -z "${f##dev-*}" ] || echo -n "\"$(quote_arg "$f")\" "; done)
rpmi -i $verbose --nodeps --justdb $(for f in $buildlist; do f="${f##*/}"; [ -n "${f##dev-*}" ] || echo -n "\"$(quote_arg "$f")\" "; done)
# /FIXME
__EOF__

"$chrootuid1" $number "$chroot" /.host/entry &&
	Verbose "installed build package list." ||
	Fatal "failed to install build package list."

purge_chroot_in
update_RPM_database $buildlist

# First time scripts.

cat >"$entry" <<__EOF__
$entry_fakeroot_header

ldconfig
adjust_kernel_headers
groupadd -g $gid2 builder
useradd -M -u $uid2 -g $gid2 -d /usr/src builder
chmod 1777 /usr/src
__EOF__

"$chrootuid1" $number "$chroot" /.host/entry &&
	Verbose "first time initialization complete." ||
	Fatal "first time initialization failed."

if [ -n "$rebuild_cache" ]; then
	# archive rpmdb
	f="cache/$PROG/rpmdb.tar"
	tar -cf "$f" -C aptbox/var/lib/rpm/ . &&
		Verbose "archived RPM database" ||
		Fatal "archiving of RPM database failed."
		
	# archive chroot
	f="cache/$PROG/chroot.list"
	"$chrootuid1" $number "$chroot" /.host/find $(cd chroot && /bin/ls -1 |grep -v ^dev) >"$f" &&
		Verbose "generated chroot filelist" ||
		Fatal "generation of chroot filelist failed."
	"$chrootuid1" $number "$chroot" /.host/cpio --create --quiet <"$f" >"cache/$PROG/chroot.cpio" &&
		Verbose "archived chroot" ||
		Fatal "archiving of chroot failed."
fi # rebuild_cache

else # !no_cache && !rebuild_cache
	# restore rpmdb
	f="cache/$PROG/rpmdb.tar"
	rm -f aptbox/var/lib/rpm/*
	tar -xf "$f" -C aptbox/var/lib/rpm/ &&
		Verbose "unpacked $f" ||
		Fatal "unpack of $f failed."
		
	# restore chroot
	f="cache/$PROG/chroot.cpio"
	cat "$f" |"$chrootuid1" $number "$chroot" /.host/cpio --extract --make-directories --sparse --quiet &&
		Verbose "unpacked $f" ||
		Fatal "unpack of $f failed."
fi # !no_cache && !rebuild_cache

# Create /dev/log.
/usr/bin/mksock -m666 "$chroot/dev/log" ||
	Fatal "failed to create \`$chroot/dev/log' socket."

# Install contents indeces.
if [ -n "$contents_index_bin" ]; then
	install -p -m644 $verbose -- "$contents_index_bin" chroot/.host/contents_index_bin
elif [ -n "$contents_index_all" ]; then
	if egrep '^(/usr(/X11R6)?)?/s?bin/' "$contents_index_all" >chroot/.host/contents_index_bin; then
		chmod 644 chroot/.host/contents_index_bin
		Verbose "created contents_index_bin from $contents_index_all"
		contents_index_bin="$chroot/.host/contents_index_bin"
	else
		rm -f $verbose -- chroot/.host/contents_index_bin
	fi
fi

# Create RPM build directory tree.
cat >"$entry" <<__EOF__
$entry_header

rpminit $verbose
cat >>/usr/src/.rpmmacros <<\EOF
%packager Automated package hasher <hasher@altlinux.org>
%buildhost ${USER:-`id -nu`}.hasher.altlinux.org
%__nprocs $nprocs
${contents_index_bin:+%_pkg_contents_index_bin /.host/contents_index_bin}
EOF
__EOF__
chmod 755 "$entry"

"$chrootuid2" $number "$chroot" /.host/entry &&
	Verbose "created RPM build directory tree." ||
	Fatal "failed to create RPM build directory tree."

